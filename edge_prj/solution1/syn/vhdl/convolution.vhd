-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    operatr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    operatr_ce0 : OUT STD_LOGIC;
    operatr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    block_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    block_r_ce0 : OUT STD_LOGIC;
    block_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_100_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_118_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_134_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_60 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_71 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_14_fu_149_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal value_fu_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_2_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_fu_106_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_114_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast3_fu_90_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast1_fu_124_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_140_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_155_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_155_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_60 <= i_2_reg_182;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_60 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_71 <= j_2_reg_195;
            elsif (((exitcond1_fu_94_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_71 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    value_fu_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                value_fu_32 <= value_2_fu_161_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                value_fu_32 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_182 <= i_2_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_2_reg_195 <= j_2_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_94_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_187 <= tmp_fu_118_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_94_p2, ap_CS_fsm_state3, exitcond_fu_128_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_94_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_94_p2)
    begin
        if ((((exitcond1_fu_94_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_94_p2)
    begin
        if (((exitcond1_fu_94_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= value_fu_32;
    block_r_address0 <= tmp_14_fu_149_p1(4 - 1 downto 0);

    block_r_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            block_r_ce0 <= ap_const_logic_1;
        else 
            block_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_94_p2 <= "1" when (i_reg_60 = ap_const_lv2_3) else "0";
    exitcond_fu_128_p2 <= "1" when (j_reg_71 = ap_const_lv2_3) else "0";
    i_2_fu_100_p2 <= std_logic_vector(unsigned(i_reg_60) + unsigned(ap_const_lv2_1));
    i_cast3_fu_90_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_60),5));
    j_2_fu_134_p2 <= std_logic_vector(unsigned(j_reg_71) + unsigned(ap_const_lv2_1));
    j_cast1_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_71),5));
    operatr_address0 <= tmp_14_fu_149_p1(4 - 1 downto 0);

    operatr_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            operatr_ce0 <= ap_const_logic_1;
        else 
            operatr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_106_p3),5));
    p_shl_fu_106_p3 <= (i_reg_60 & ap_const_lv2_0);
    tmp_14_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_145_p1),64));
    tmp_15_fu_155_p0 <= operatr_q0;
    tmp_15_fu_155_p1 <= block_r_q0;
    tmp_15_fu_155_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_15_fu_155_p0) * signed(tmp_15_fu_155_p1))), 32));
        tmp_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_140_p2),32));

    tmp_fu_118_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_114_p1) - unsigned(i_cast3_fu_90_p1));
    tmp_s_fu_140_p2 <= std_logic_vector(unsigned(tmp_reg_187) + unsigned(j_cast1_fu_124_p1));
    value_2_fu_161_p2 <= std_logic_vector(unsigned(tmp_15_fu_155_p2) + unsigned(value_fu_32));
end behav;
