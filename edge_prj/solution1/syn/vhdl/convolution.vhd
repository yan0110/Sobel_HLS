-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    operatr_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    operatr_ce0 : OUT STD_LOGIC;
    operatr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    block_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    block_r_ce0 : OUT STD_LOGIC;
    block_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_fu_85_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_152 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal value_2_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal value_reg_52 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_64 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_14_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_91_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_99_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast3_fu_75_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_103_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_109_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_137_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((exitcond1_fu_79_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= value_reg_52;
                end if; 
            end if;
        end if;
    end process;


    i_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_64 <= i_2_reg_152;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_64 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    value_reg_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                value_reg_52 <= value_2_fu_143_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                value_reg_52 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_152 <= i_2_fu_85_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_79_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_79_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_79_p2)
    begin
        if ((((exitcond1_fu_79_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_79_p2)
    begin
        if (((exitcond1_fu_79_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_79_p2, value_reg_52, ap_return_preg)
    begin
        if (((exitcond1_fu_79_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= value_reg_52;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    block_r_address0 <= tmp_14_fu_119_p1(4 - 1 downto 0);

    block_r_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            block_r_ce0 <= ap_const_logic_1;
        else 
            block_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_79_p2 <= "1" when (i_reg_64 = ap_const_lv2_3) else "0";
    i_2_fu_85_p2 <= std_logic_vector(unsigned(i_reg_64) + unsigned(ap_const_lv2_1));
    i_cast3_fu_75_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_64),5));
    operatr_address0 <= tmp_14_fu_119_p1(4 - 1 downto 0);

    operatr_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            operatr_ce0 <= ap_const_logic_1;
        else 
            operatr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_cast_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_91_p3),5));
    p_shl_fu_91_p3 <= (i_reg_64 & ap_const_lv2_0);
    tmp_14_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_115_p1),64));
    tmp_16_fu_131_p2 <= std_logic_vector(unsigned(tmp_1_fu_125_p2) - unsigned(operatr_q0));
    tmp_17_fu_137_p0 <= block_r_q0;
    tmp_17_fu_137_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_17_fu_137_p0) * signed(tmp_16_fu_131_p2))), 32));
    tmp_1_fu_125_p2 <= std_logic_vector(shift_left(unsigned(operatr_q0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
        tmp_cast_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_109_p2),32));

    tmp_fu_103_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_99_p1) - unsigned(i_cast3_fu_75_p1));
    tmp_s_fu_109_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(tmp_fu_103_p2));
    value_2_fu_143_p2 <= std_logic_vector(unsigned(tmp_17_fu_137_p2) + unsigned(value_reg_52));
end behav;
