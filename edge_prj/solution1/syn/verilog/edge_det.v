// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="edge_det,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.129000,HLS_SYN_LAT=230201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=414,HLS_SYN_LUT=692}" *)

module edge_det (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        video_address0,
        video_ce0,
        video_q0,
        sob_x1_address0,
        sob_x1_ce0,
        sob_x1_we0,
        sob_x1_d0,
        sob_y1_address0,
        sob_y1_ce0,
        sob_y1_we0,
        sob_y1_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] video_address0;
output   video_ce0;
input  [31:0] video_q0;
output  [13:0] sob_x1_address0;
output   sob_x1_ce0;
output   sob_x1_we0;
output  [31:0] sob_x1_d0;
output  [13:0] sob_y1_address0;
output   sob_y1_ce0;
output   sob_y1_we0;
output  [31:0] sob_y1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg video_ce0;
reg[13:0] sob_x1_address0;
reg sob_x1_ce0;
reg sob_x1_we0;
reg[31:0] sob_x1_d0;
reg[13:0] sob_y1_address0;
reg sob_y1_ce0;
reg sob_y1_we0;
reg[31:0] sob_y1_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    sob_x_ce0;
wire   [31:0] sob_x_q0;
reg    sob_y_ce0;
wire   [31:0] sob_y_q0;
wire   [13:0] next_mul_fu_213_p2;
reg   [13:0] next_mul_reg_386;
wire    ap_CS_fsm_state2;
wire   [6:0] i_1_fu_225_p2;
reg   [6:0] i_1_reg_394;
wire   [0:0] tmp_fu_231_p2;
reg   [0:0] tmp_reg_399;
wire   [0:0] exitcond3_fu_219_p2;
wire   [13:0] j_cast7_fu_237_p1;
reg   [13:0] j_cast7_reg_404;
wire    ap_CS_fsm_state3;
wire   [6:0] j_1_fu_248_p2;
reg   [6:0] j_1_reg_413;
wire   [0:0] or_cond_fu_260_p2;
reg   [0:0] or_cond_reg_418;
wire   [0:0] exitcond2_fu_242_p2;
wire   [1:0] m_1_fu_285_p2;
reg   [1:0] m_1_reg_425;
wire    ap_CS_fsm_state4;
wire   [13:0] tmp_9_fu_301_p2;
reg   [13:0] tmp_9_reg_430;
wire   [0:0] exitcond1_fu_279_p2;
wire   [4:0] tmp_s_fu_319_p2;
reg   [4:0] tmp_s_reg_435;
wire   [1:0] n_1_fu_335_p2;
reg   [1:0] n_1_reg_443;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_329_p2;
wire   [4:0] tmp_12_fu_368_p2;
reg   [4:0] tmp_12_reg_453;
wire   [31:0] grp_convolution_fu_199_ap_return;
reg   [31:0] value_reg_458;
wire    ap_CS_fsm_state7;
wire    grp_convolution_fu_199_ap_done;
wire   [13:0] grp_fu_208_p2;
reg   [13:0] tmp_6_reg_463;
reg   [3:0] block_address0;
reg    block_ce0;
reg    block_we0;
wire   [31:0] block_q0;
wire    grp_convolution_fu_199_ap_start;
wire    grp_convolution_fu_199_ap_idle;
wire    grp_convolution_fu_199_ap_ready;
wire   [3:0] grp_convolution_fu_199_operatr_address0;
wire    grp_convolution_fu_199_operatr_ce0;
reg   [31:0] grp_convolution_fu_199_operatr_q0;
wire   [3:0] grp_convolution_fu_199_block_r_address0;
wire    grp_convolution_fu_199_block_r_ce0;
reg   [6:0] i_reg_142;
reg   [13:0] phi_mul_reg_154;
reg   [6:0] j_reg_166;
wire    ap_CS_fsm_state9;
reg    ap_block_state9_on_subcall_done;
reg   [1:0] m_reg_177;
reg   [1:0] n_reg_188;
wire    ap_CS_fsm_state6;
reg    ap_reg_grp_convolution_fu_199_ap_start;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_5_fu_265_p1;
wire   [63:0] tmp_11_fu_363_p1;
wire   [63:0] tmp_13_fu_376_p1;
wire   [63:0] tmp_7_fu_381_p1;
reg   [13:0] grp_fu_208_p1;
wire   [0:0] tmp_3_fu_254_p2;
wire   [6:0] m_cast6_fu_271_p1;
wire   [6:0] tmp_8_fu_291_p2;
wire   [6:0] tmp_9_fu_301_p0;
wire   [3:0] p_shl_fu_307_p3;
wire   [4:0] p_shl_cast_fu_315_p1;
wire   [4:0] m_cast5_fu_275_p1;
wire   [11:0] tmp_15_fu_341_p4;
wire   [13:0] tmp1_fu_350_p3;
wire   [13:0] tmp_10_fu_358_p2;
wire   [4:0] n_cast3_fu_325_p1;
wire  signed [31:0] tmp_12_cast_fu_373_p1;
reg   [8:0] ap_NS_fsm;
wire   [13:0] tmp_9_fu_301_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_reg_grp_convolution_fu_199_ap_start = 1'b0;
end

edge_det_sob_x #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sob_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_convolution_fu_199_operatr_address0),
    .ce0(sob_x_ce0),
    .q0(sob_x_q0)
);

edge_det_sob_y #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
sob_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_convolution_fu_199_operatr_address0),
    .ce0(sob_y_ce0),
    .q0(sob_y_q0)
);

edge_det_block #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
block_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(block_address0),
    .ce0(block_ce0),
    .we0(block_we0),
    .d0(video_q0),
    .q0(block_q0)
);

convolution grp_convolution_fu_199(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_convolution_fu_199_ap_start),
    .ap_done(grp_convolution_fu_199_ap_done),
    .ap_idle(grp_convolution_fu_199_ap_idle),
    .ap_ready(grp_convolution_fu_199_ap_ready),
    .operatr_address0(grp_convolution_fu_199_operatr_address0),
    .operatr_ce0(grp_convolution_fu_199_operatr_ce0),
    .operatr_q0(grp_convolution_fu_199_operatr_q0),
    .block_r_address0(grp_convolution_fu_199_block_r_address0),
    .block_r_ce0(grp_convolution_fu_199_block_r_ce0),
    .block_r_q0(block_q0),
    .ap_return(grp_convolution_fu_199_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_convolution_fu_199_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_279_p2 == 1'd1)))) begin
            ap_reg_grp_convolution_fu_199_ap_start <= 1'b1;
        end else if ((grp_convolution_fu_199_ap_ready == 1'b1)) begin
            ap_reg_grp_convolution_fu_199_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_142 <= i_1_reg_394;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_142 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        j_reg_166 <= j_1_reg_413;
    end else if (((exitcond3_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_166 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_242_p2 == 1'd0) & (or_cond_fu_260_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_reg_177 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_329_p2 == 1'd1))) begin
        m_reg_177 <= m_1_reg_425;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        n_reg_188 <= n_1_reg_443;
    end else if (((exitcond1_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        n_reg_188 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_154 <= next_mul_reg_386;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_154 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_394 <= i_1_fu_225_p2;
        next_mul_reg_386 <= next_mul_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_413 <= j_1_fu_248_p2;
        j_cast7_reg_404[6 : 0] <= j_cast7_fu_237_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_1_reg_425 <= m_1_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_1_reg_443 <= n_1_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        or_cond_reg_418 <= or_cond_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_12_reg_453 <= tmp_12_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_convolution_fu_199_ap_done == 1'b1))) begin
        tmp_6_reg_463 <= grp_fu_208_p2;
        value_reg_458 <= grp_convolution_fu_199_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_9_reg_430[13 : 2] <= tmp_9_fu_301_p2[13 : 2];
        tmp_s_reg_435 <= tmp_s_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_399 <= tmp_fu_231_p2;
    end
end

always @ (*) begin
    if (((exitcond3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_address0 = tmp_13_fu_376_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((or_cond_reg_418 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        block_address0 = grp_convolution_fu_199_block_r_address0;
    end else begin
        block_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | ((or_cond_reg_418 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        block_ce0 = grp_convolution_fu_199_block_r_ce0;
    end else begin
        block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        block_we0 = 1'b1;
    end else begin
        block_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_418 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        grp_convolution_fu_199_operatr_q0 = sob_y_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_convolution_fu_199_operatr_q0 = sob_x_q0;
    end else begin
        grp_convolution_fu_199_operatr_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_208_p1 = j_cast7_reg_404;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_208_p1 = j_cast7_fu_237_p1;
    end else begin
        grp_fu_208_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sob_x1_address0 = tmp_7_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sob_x1_address0 = tmp_5_fu_265_p1;
    end else begin
        sob_x1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done)))) begin
        sob_x1_ce0 = 1'b1;
    end else begin
        sob_x1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sob_x1_d0 = value_reg_458;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sob_x1_d0 = 32'd0;
    end else begin
        sob_x1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((or_cond_fu_260_p2 == 1'd1) & (exitcond2_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((or_cond_reg_418 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done)))) begin
        sob_x1_we0 = 1'b1;
    end else begin
        sob_x1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sob_x_ce0 = grp_convolution_fu_199_operatr_ce0;
    end else begin
        sob_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sob_y1_address0 = tmp_7_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sob_y1_address0 = tmp_5_fu_265_p1;
    end else begin
        sob_y1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done)))) begin
        sob_y1_ce0 = 1'b1;
    end else begin
        sob_y1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sob_y1_d0 = grp_convolution_fu_199_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sob_y1_d0 = 32'd0;
    end else begin
        sob_y1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((or_cond_fu_260_p2 == 1'd1) & (exitcond2_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((or_cond_reg_418 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done)))) begin
        sob_y1_we0 = 1'b1;
    end else begin
        sob_y1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_418 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        sob_y_ce0 = grp_convolution_fu_199_operatr_ce0;
    end else begin
        sob_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        video_ce0 = 1'b1;
    end else begin
        video_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_242_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((or_cond_fu_260_p2 == 1'd1) & (exitcond2_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_329_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_convolution_fu_199_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state9_on_subcall_done = ((or_cond_reg_418 == 1'd0) & (grp_convolution_fu_199_ap_done == 1'b0));
end

assign exitcond1_fu_279_p2 = ((m_reg_177 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_242_p2 = ((j_reg_166 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond3_fu_219_p2 = ((i_reg_142 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_fu_329_p2 = ((n_reg_188 == 2'd3) ? 1'b1 : 1'b0);

assign grp_convolution_fu_199_ap_start = ap_reg_grp_convolution_fu_199_ap_start;

assign grp_fu_208_p2 = (phi_mul_reg_154 + grp_fu_208_p1);

assign i_1_fu_225_p2 = (i_reg_142 + 7'd1);

assign j_1_fu_248_p2 = (j_reg_166 + 7'd1);

assign j_cast7_fu_237_p1 = j_reg_166;

assign m_1_fu_285_p2 = (m_reg_177 + 2'd1);

assign m_cast5_fu_275_p1 = m_reg_177;

assign m_cast6_fu_271_p1 = m_reg_177;

assign n_1_fu_335_p2 = (n_reg_188 + 2'd1);

assign n_cast3_fu_325_p1 = n_reg_188;

assign next_mul_fu_213_p2 = (phi_mul_reg_154 + 14'd100);

assign or_cond_fu_260_p2 = (tmp_reg_399 | tmp_3_fu_254_p2);

assign p_shl_cast_fu_315_p1 = p_shl_fu_307_p3;

assign p_shl_fu_307_p3 = {{m_reg_177}, {2'd0}};

assign tmp1_fu_350_p3 = {{tmp_15_fu_341_p4}, {n_reg_188}};

assign tmp_10_fu_358_p2 = (j_cast7_reg_404 + tmp1_fu_350_p3);

assign tmp_11_fu_363_p1 = tmp_10_fu_358_p2;

assign tmp_12_cast_fu_373_p1 = $signed(tmp_12_reg_453);

assign tmp_12_fu_368_p2 = (n_cast3_fu_325_p1 + tmp_s_reg_435);

assign tmp_13_fu_376_p1 = $unsigned(tmp_12_cast_fu_373_p1);

assign tmp_15_fu_341_p4 = {{tmp_9_reg_430[13:2]}};

assign tmp_3_fu_254_p2 = ((j_reg_166 > 7'd97) ? 1'b1 : 1'b0);

assign tmp_5_fu_265_p1 = grp_fu_208_p2;

assign tmp_7_fu_381_p1 = tmp_6_reg_463;

assign tmp_8_fu_291_p2 = (m_cast6_fu_271_p1 + i_reg_142);

assign tmp_9_fu_301_p0 = tmp_9_fu_301_p00;

assign tmp_9_fu_301_p00 = tmp_8_fu_291_p2;

assign tmp_9_fu_301_p2 = (tmp_9_fu_301_p0 * $signed('h64));

assign tmp_fu_231_p2 = ((i_reg_142 > 7'd97) ? 1'b1 : 1'b0);

assign tmp_s_fu_319_p2 = (p_shl_cast_fu_315_p1 - m_cast5_fu_275_p1);

assign video_address0 = tmp_11_fu_363_p1;

always @ (posedge ap_clk) begin
    j_cast7_reg_404[13:7] <= 7'b0000000;
    tmp_9_reg_430[1:0] <= 2'b00;
end

endmodule //edge_det
