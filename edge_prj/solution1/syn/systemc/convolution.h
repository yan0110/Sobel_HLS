// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _convolution_HH_
#define _convolution_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct convolution : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > operatr_address0;
    sc_out< sc_logic > operatr_ce0;
    sc_in< sc_lv<32> > operatr_q0;
    sc_out< sc_lv<4> > block_r_address0;
    sc_out< sc_logic > block_r_ce0;
    sc_in< sc_lv<32> > block_r_q0;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    convolution(sc_module_name name);
    SC_HAS_PROCESS(convolution);

    ~convolution();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i_2_fu_100_p2;
    sc_signal< sc_lv<2> > i_2_reg_182;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > tmp_fu_118_p2;
    sc_signal< sc_lv<5> > tmp_reg_187;
    sc_signal< sc_lv<1> > exitcond1_fu_94_p2;
    sc_signal< sc_lv<2> > j_2_fu_134_p2;
    sc_signal< sc_lv<2> > j_2_reg_195;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond_fu_128_p2;
    sc_signal< sc_lv<2> > i_reg_60;
    sc_signal< sc_lv<2> > j_reg_71;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_14_fu_149_p1;
    sc_signal< sc_lv<32> > value_fu_32;
    sc_signal< sc_lv<32> > value_2_fu_161_p2;
    sc_signal< sc_lv<4> > p_shl_fu_106_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_114_p1;
    sc_signal< sc_lv<5> > i_cast3_fu_90_p1;
    sc_signal< sc_lv<5> > j_cast1_fu_124_p1;
    sc_signal< sc_lv<5> > tmp_s_fu_140_p2;
    sc_signal< sc_lv<32> > tmp_cast_fu_145_p1;
    sc_signal< sc_lv<32> > tmp_15_fu_155_p0;
    sc_signal< sc_lv<32> > tmp_15_fu_155_p1;
    sc_signal< sc_lv<32> > tmp_15_fu_155_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_block_r_address0();
    void thread_block_r_ce0();
    void thread_exitcond1_fu_94_p2();
    void thread_exitcond_fu_128_p2();
    void thread_i_2_fu_100_p2();
    void thread_i_cast3_fu_90_p1();
    void thread_j_2_fu_134_p2();
    void thread_j_cast1_fu_124_p1();
    void thread_operatr_address0();
    void thread_operatr_ce0();
    void thread_p_shl_cast_fu_114_p1();
    void thread_p_shl_fu_106_p3();
    void thread_tmp_14_fu_149_p1();
    void thread_tmp_15_fu_155_p0();
    void thread_tmp_15_fu_155_p1();
    void thread_tmp_15_fu_155_p2();
    void thread_tmp_cast_fu_145_p1();
    void thread_tmp_fu_118_p2();
    void thread_tmp_s_fu_140_p2();
    void thread_value_2_fu_161_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
