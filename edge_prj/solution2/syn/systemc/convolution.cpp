// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolution.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolution::ap_const_logic_1 = sc_dt::Log_1;
const bool convolution::ap_const_boolean_1 = true;
const sc_lv<32> convolution::ap_const_lv32_1 = "1";
const sc_logic convolution::ap_const_logic_0 = sc_dt::Log_0;

convolution::convolution(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_fu_66_p2 );
    sensitive << ( tmp1_fu_78_p2 );

    SC_METHOD(thread_tmp1_fu_78_p2);
    sensitive << ( tmp_15_2_fu_60_p2 );
    sensitive << ( tmp_2_fu_72_p2 );

    SC_METHOD(thread_tmp_15_2_fu_60_p0);
    sensitive << ( p_read5 );

    SC_METHOD(thread_tmp_15_2_fu_60_p1);
    sensitive << ( tmp_15_2_fu_60_p10 );

    SC_METHOD(thread_tmp_15_2_fu_60_p10);
    sensitive << ( p_read2 );

    SC_METHOD(thread_tmp_15_2_fu_60_p2);
    sensitive << ( tmp_15_2_fu_60_p0 );
    sensitive << ( tmp_15_2_fu_60_p1 );

    SC_METHOD(thread_tmp_15_fu_48_p0);
    sensitive << ( p_read3 );

    SC_METHOD(thread_tmp_15_fu_48_p1);
    sensitive << ( p_read );

    SC_METHOD(thread_tmp_15_fu_48_p2);
    sensitive << ( tmp_15_fu_48_p0 );
    sensitive << ( tmp_15_fu_48_p1 );

    SC_METHOD(thread_tmp_1_fu_54_p2);
    sensitive << ( tmp_15_fu_48_p2 );

    SC_METHOD(thread_tmp_2_fu_72_p2);
    sensitive << ( tmp_15_2_fu_60_p2 );

    SC_METHOD(thread_tmp_fu_66_p2);
    sensitive << ( tmp_15_fu_48_p2 );
    sensitive << ( tmp_1_fu_54_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolution_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read2, "(port)p_read2");
    sc_trace(mVcdFile, p_read3, "(port)p_read3");
    sc_trace(mVcdFile, p_read5, "(port)p_read5");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_15_fu_48_p0, "tmp_15_fu_48_p0");
    sc_trace(mVcdFile, tmp_15_fu_48_p1, "tmp_15_fu_48_p1");
    sc_trace(mVcdFile, tmp_15_fu_48_p2, "tmp_15_fu_48_p2");
    sc_trace(mVcdFile, tmp_15_2_fu_60_p0, "tmp_15_2_fu_60_p0");
    sc_trace(mVcdFile, tmp_15_2_fu_60_p1, "tmp_15_2_fu_60_p1");
    sc_trace(mVcdFile, tmp_1_fu_54_p2, "tmp_1_fu_54_p2");
    sc_trace(mVcdFile, tmp_15_2_fu_60_p2, "tmp_15_2_fu_60_p2");
    sc_trace(mVcdFile, tmp_2_fu_72_p2, "tmp_2_fu_72_p2");
    sc_trace(mVcdFile, tmp_fu_66_p2, "tmp_fu_66_p2");
    sc_trace(mVcdFile, tmp1_fu_78_p2, "tmp1_fu_78_p2");
    sc_trace(mVcdFile, tmp_15_2_fu_60_p10, "tmp_15_2_fu_60_p10");
#endif

    }
}

convolution::~convolution() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void convolution::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void convolution::thread_ap_return() {
    ap_return = (!tmp_fu_66_p2.read().is_01() || !tmp1_fu_78_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_fu_66_p2.read()) + sc_biguint<32>(tmp1_fu_78_p2.read()));
}

void convolution::thread_tmp1_fu_78_p2() {
    tmp1_fu_78_p2 = (!tmp_15_2_fu_60_p2.read().is_01() || !tmp_2_fu_72_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_15_2_fu_60_p2.read()) + sc_biguint<32>(tmp_2_fu_72_p2.read()));
}

void convolution::thread_tmp_15_2_fu_60_p0() {
    tmp_15_2_fu_60_p0 = p_read5.read();
}

void convolution::thread_tmp_15_2_fu_60_p1() {
    tmp_15_2_fu_60_p1 =  (sc_lv<4>) (tmp_15_2_fu_60_p10.read());
}

void convolution::thread_tmp_15_2_fu_60_p10() {
    tmp_15_2_fu_60_p10 = esl_zext<32,4>(p_read2.read());
}

void convolution::thread_tmp_15_2_fu_60_p2() {
    tmp_15_2_fu_60_p2 = (!tmp_15_2_fu_60_p0.read().is_01() || !tmp_15_2_fu_60_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_15_2_fu_60_p0.read()) * sc_biguint<4>(tmp_15_2_fu_60_p1.read());
}

void convolution::thread_tmp_15_fu_48_p0() {
    tmp_15_fu_48_p0 = p_read3.read();
}

void convolution::thread_tmp_15_fu_48_p1() {
    tmp_15_fu_48_p1 = p_read.read();
}

void convolution::thread_tmp_15_fu_48_p2() {
    tmp_15_fu_48_p2 = (!tmp_15_fu_48_p0.read().is_01() || !tmp_15_fu_48_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_15_fu_48_p0.read()) * sc_bigint<3>(tmp_15_fu_48_p1.read());
}

void convolution::thread_tmp_1_fu_54_p2() {
    tmp_1_fu_54_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): tmp_15_fu_48_p2.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void convolution::thread_tmp_2_fu_72_p2() {
    tmp_2_fu_72_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): tmp_15_2_fu_60_p2.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void convolution::thread_tmp_fu_66_p2() {
    tmp_fu_66_p2 = (!tmp_1_fu_54_p2.read().is_01() || !tmp_15_fu_48_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_1_fu_54_p2.read()) + sc_biguint<32>(tmp_15_fu_48_p2.read()));
}

}

